group protocob-group : cobol-group;

/**
 * Template to convert a COBOL data item to a protocol buffer parser.
 */
toProtocobParser(protoCobolDataItem) ::= <<
       IDENTIFICATION DIVISION.
       PROGRAM-ID. $protoCobolDataItem.parserProgramName$.
      *****************************************************************
      * OVERVIEW                                                      *
      * --------                                                      *
      * Subprogram that parses a protobuf byte stream and populates   *
      * a cobol structure.                                            *
      *                                                               *
      * This is generated code produced by protobuf-cobol.            *
      * It uses the PB4CBLIB protobuf-cobol library.                  *
      *                                                               *
      * Limits:                                                       *
      *    256 fields per message                                     *
      *    16777215 message byte length                               *
      *                                                               *
      *****************************************************************

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER. IBM-390 WITH DEBUGGING MODE.
       DATA DIVISION.
      *****************************************************************
      *        W O R K I N G    S T O R A G E    S E C T I O N        *
      *****************************************************************
       WORKING-STORAGE SECTION.

      *    // Protobuf field key and type
       01  W-P-KEYTYPE.
           05  W-P-KEY               PIC 9(8) COMP-5.
           05  W-P-TYPE              PIC 9(4) COMP-5.
               88 VARINT             VALUE 0.
               88 FIXED-64           VALUE 1.
               88 LENGTH-DELIMITED   VALUE 2.
               88 FIXED-32           VALUE 5.
               88 VALID-WIRE-TYPE    VALUE 0, 1, 2, 5.

      *    // Tracks the current location in protobuf byte stream
       01  W-I                       PIC 9(8) COMP-5.

      *    // A pointer to the current protobuf byte stream location 
       01  W-STREAM                  POINTER.

      *    // a double word binary to hold unsigned long integers
       01  W-Z-UINT64                PIC 9(18) COMP-5.

      *    // a single word binary to hold unsigned integers
       01  W-Z-UINT32                PIC 9(8) COMP-5.

      *    // a double word binary to hold signed long integers
       01  W-Z-INT64                 PIC S9(18) COMP-5.

      *    // a single word binary to hold signed integers
       01  W-Z-INT32                 PIC S9(8) COMP-5.

      *    // a simple floating point numeric
       01  W-Z-COMP-1                COMP-1.

      *    // a double floating point numeric
       01  W-Z-COMP-2                COMP-2.

      *    // library calls return how many stream bytes were consumed 
       01  W-BYTES-USED              PIC 9(8) COMP-5.


$if(protoCobolDataItem.hasSubStructures)$
      *    // Sub-messages maximum offset from input start
$protoCobolDataItem.subStructuresCobolName:listSubMessageLength(); separator="\n"$$endif$

$if(protoCobolDataItem.hasIndexedItems)$
      *    // Array indexes
$protoCobolDataItem.indexedCobolNames:listIndexedFieldsIndexes(); separator="\n"$$endif$

$if(protoCobolDataItem.hasAlphanumItems)$
      *    // Conversion buffer for Strings
       01  W-UTF16-BUFFER            PIC N($protoCobolDataItem.maxStringSize$).$endif$

      *****************************************************************
      *        L I N K A G E    S E C T I O N                         *
      *****************************************************************
       LINKAGE SECTION.

      *    // The protobuf input byte stream
       01  PROTOBUF-BYTES            PIC X(16777215).

      *    // The protobuf input byte stream length
       01  PROTOBUF-BYTES-LEN        PIC 9(8) COMP-5.

      *    // The output COBOL structure
$protoCobolDataItem.copybook$
       
      *    // A protobuf variable integer
       01  P-VARINT                  PIC X(10).
     
      *    // A protobuf float (IEEE 754)
       01  P-FLOAT                   PIC X(4).

      *    // A protobuf double (IEEE 754)
       01  P-DOUBLE                  PIC X(8).

      *****************************************************************
      *    P R O C E D U R E  D I V I S I O N   S E C T I O N         *
      *****************************************************************
       PROCEDURE DIVISION USING
               PROTOBUF-BYTES,
               PROTOBUF-BYTES-LEN,
$\ $$\ $$\ $$\ $$\ $$\ $$\ $$\ $$\ $$\ $$\ $$\ $$\ $$\ $$\ $$protoCobolDataItem.cobolName$.
      *    // Initialize counters
$protoCobolDataItem.dependingOns:initDependingOns(); separator="\n"$
$protoCobolDataItem.indexedCobolNames:initIndexedFieldsIndexes(); separator="\n"$
      *    // Parse the root protobuf message
           MOVE 1 TO W-I.
           PERFORM PARSE-$protoCobolDataItem.cobolName$ THRU
               END-PARSE-$protoCobolDataItem.cobolName$
                   UNTIL W-I > PROTOBUF-BYTES-LEN.
           GOBACK.

$parseDataItem(protoCobolDataItem)$

      * ---------------------------------------------------------------
      * Get a field key (identifier) and type from the stream.
      *
      * Field and Type are both encoded in a single variable integer.
      *
      * Field type is 3 lower bits of header varint, higher bits are
      * the field key (identifier)
      * ---------------------------------------------------------------
       GET-P-KEYTYPE.
           PERFORM P-VARINT-TO-Z-UINT64 THRU END-P-VARINT-TO-Z-UINT64.
           DIVIDE W-Z-UINT64 BY 8 GIVING W-P-KEY REMAINDER W-P-TYPE.
       END-GET-P-KEYTYPE. EXIT.
       
      * ---------------------------------------------------------------
      * Get a variable integer from the stream as unsigned double word
      * binary.
      * ---------------------------------------------------------------
       P-VARINT-TO-Z-UINT64.
           SET ADDRESS OF P-VARINT TO W-STREAM.
           CALL 'PBVI2U64' USING P-VARINT W-Z-UINT64 W-BYTES-USED.
       END-P-VARINT-TO-Z-UINT64. EXIT.

      * ---------------------------------------------------------------
      * Get a variable integer from the stream as unsigned single word
      * binary.
      * ---------------------------------------------------------------
       P-VARINT-TO-Z-UINT32.
           SET ADDRESS OF P-VARINT TO W-STREAM.
           CALL 'PBVI2U32' USING P-VARINT W-Z-UINT32 W-BYTES-USED.
       END-P-VARINT-TO-Z-UINT32. EXIT.

      * ---------------------------------------------------------------
      * Get a variable integer from the stream as signed double word
      * binary.
      * ---------------------------------------------------------------
       P-VARINT-TO-Z-INT64.
           SET ADDRESS OF P-VARINT TO W-STREAM.
           CALL 'PBVI2S64' USING P-VARINT W-Z-INT64 W-BYTES-USED.
       END-P-VARINT-TO-Z-INT64. EXIT.

      * ---------------------------------------------------------------
      * Get a variable integer from the stream as signed single word
      * binary.
      * ---------------------------------------------------------------
       P-VARINT-TO-Z-INT32.
           SET ADDRESS OF P-VARINT TO W-STREAM.
           CALL 'PBVI2S32' USING P-VARINT W-Z-INT32 W-BYTES-USED.
       END-P-VARINT-TO-Z-INT32. EXIT.

      * ---------------------------------------------------------------
      * Get a IEEE float from the stream as a COMP-1
      * ---------------------------------------------------------------
       P-FLOAT-TO-Z-COMP-1.
           SET ADDRESS OF P-FLOAT TO W-STREAM.
           CALL 'PB2ZFLOA' USING P-FLOAT W-Z-COMP-1 W-BYTES-USED.
       END-P-FLOAT-TO-Z-COMP-1. EXIT.

      * ---------------------------------------------------------------
      * Get a IEEE double from the stream as a COMP-2
      * ---------------------------------------------------------------
       P-DOUBLE-TO-Z-COMP-2.
           SET ADDRESS OF P-DOUBLE TO W-STREAM.
           CALL 'PB2ZDBLE' USING P-DOUBLE W-Z-COMP-2 W-BYTES-USED.
       END-P-DOUBLE-TO-Z-COMP-2. EXIT.

       END PROGRAM $protoCobolDataItem.parserProgramName$.
>>

listSubMessageLength() ::= <<
       01  W-$it$-L     PIC 9(8) COMP-5.
>>

listIndexedFieldsIndexes() ::= <<
       01  W-$it$-I     PIC 9(8) COMP-5.
>>

initIndexedFieldsIndexes() ::= <<
           MOVE ZERO TO W-$it$-I.
>>

initDependingOns() ::= <<
           MOVE ZERO TO $it$.
>>

parseDataItem(protoCobolDataItem) ::= <<
$if(protoCobolDataItem.structure)$ 
      * ---------------------------------------------------------------
      * Parse the $protoCobolDataItem.cobolName$ message field
      * ---------------------------------------------------------------
       PARSE-$protoCobolDataItem.cobolName$.
      D    DISPLAY 'PARSE-$protoCobolDataItem.cobolName$ OFFSET=' W-I.

           SET W-STREAM TO ADDRESS OF PROTOBUF-BYTES(W-I:).
           PERFORM GET-P-KEYTYPE THRU END-GET-P-KEYTYPE.
           ADD W-BYTES-USED TO W-I.

           SET W-STREAM TO ADDRESS OF PROTOBUF-BYTES(W-I:).
           EVALUATE W-P-KEY
$protoCobolDataItem.children:parseChild(protoCobolDataItem=it); separator="\n"$
           END-EVALUATE.
       END-PARSE-$protoCobolDataItem.cobolName$. EXIT.

$protoCobolDataItem.children:parseDataItem(protoCobolDataItem=it)$$endif$
>>

parseChild(protoCobolDataItem) ::= <<
               WHEN $i$
$if(protoCobolDataItem.mappedToBool)$
$pBoolToZUInt32(protoCobolDataItem)$$elseif(protoCobolDataItem.mappedToString)$
$pStringToZAlphanum(protoCobolDataItem)$$elseif(protoCobolDataItem.mappedToEnum)$
$pEnumToZUInt32(protoCobolDataItem)$$elseif(protoCobolDataItem.mappedToInt32)$
$pVarintToZInt32(protoCobolDataItem)$$elseif(protoCobolDataItem.mappedToInt64)$
$pVarintToZInt64(protoCobolDataItem)$$elseif(protoCobolDataItem.mappedToUint32)$
$pVarintToZUInt32(protoCobolDataItem)$$elseif(protoCobolDataItem.mappedToUint64)$
$pVarintToZUInt64(protoCobolDataItem)$$elseif(protoCobolDataItem.mappedToFloat)$
$pFloatToZComp1(protoCobolDataItem)$$elseif(protoCobolDataItem.mappedToDouble)$
$pDoubleToZComp2(protoCobolDataItem)$$elseif(protoCobolDataItem.mappedToMessage)$
$messageToGroup(protoCobolDataItem)$$endif$
>>

pBoolToZUInt32(protoCobolDataItem) ::= <<
                 PERFORM P-VARINT-TO-Z-UINT32 THRU
                     END-P-VARINT-TO-Z-UINT32
                 COMPUTE $protoCobolDataItem.cobolName$ = W-Z-UINT32
      D          DISPLAY '$protoCobolDataItem.cobolName$ =' $protoCobolDataItem.cobolName$ ', AT OFFSET=' W-I
                 COMPUTE W-I = W-I + W-BYTES-USED
>>

pStringToZAlphanum(protoCobolDataItem) ::= <<
                 PERFORM P-VARINT-TO-Z-UINT32 THRU
                     END-P-VARINT-TO-Z-UINT32
                 COMPUTE W-I = W-I + W-BYTES-USED
                 MOVE FUNCTION NATIONAL-OF(
                    PROTOBUF-BYTES(W-I:W-Z-UINT32), 01208)
                    TO W-UTF16-BUFFER
                 MOVE FUNCTION DISPLAY-OF(W-UTF16-BUFFER, 01147)
                    TO $protoCobolDataItem.cobolName$
      D          DISPLAY '$protoCobolDataItem.cobolName$ =' $protoCobolDataItem.cobolName$ ', AT OFFSET=' W-I
                 COMPUTE W-I = W-I + W-Z-UINT32
>>

pEnumToZUInt32(protoCobolDataItem) ::= <<
                 PERFORM P-VARINT-TO-Z-UINT32 THRU
                     END-P-VARINT-TO-Z-UINT32
                 COMPUTE $protoCobolDataItem.cobolName$ = W-Z-UINT32
      D          DISPLAY '$protoCobolDataItem.cobolName$ =' $protoCobolDataItem.cobolName$ ', AT OFFSET=' W-I
                 COMPUTE W-I = W-I + W-BYTES-USED
>>

pVarintToZInt32(protoCobolDataItem) ::= <<
                 PERFORM P-VARINT-TO-Z-INT32 THRU
                     END-P-VARINT-TO-Z-INT32
                 COMPUTE $protoCobolDataItem.cobolName$ = W-Z-INT32
      D          DISPLAY '$protoCobolDataItem.cobolName$ =' $protoCobolDataItem.cobolName$ ', AT OFFSET=' W-I
                 COMPUTE W-I = W-I + W-BYTES-USED
>>

pVarintToZInt64(protoCobolDataItem) ::= <<
                 PERFORM P-VARINT-TO-Z-INT64 THRU
                     END-P-VARINT-TO-Z-INT64
                 COMPUTE $protoCobolDataItem.cobolName$ = W-Z-INT64
      D          DISPLAY '$protoCobolDataItem.cobolName$ =' $protoCobolDataItem.cobolName$ ', AT OFFSET=' W-I
                 COMPUTE W-I = W-I + W-BYTES-USED
>>

pVarintToZUInt32(protoCobolDataItem) ::= <<
                 PERFORM P-VARINT-TO-Z-UINT32 THRU
                     END-P-VARINT-TO-Z-UINT32
                 COMPUTE $protoCobolDataItem.cobolName$ = W-Z-UINT32
      D          DISPLAY '$protoCobolDataItem.cobolName$ =' $protoCobolDataItem.cobolName$ ', AT OFFSET=' W-I
                 COMPUTE W-I = W-I + W-BYTES-USED
>>

pVarintToZUInt64(protoCobolDataItem) ::= <<
                 PERFORM P-VARINT-TO-Z-UINT64 THRU
                     END-P-VARINT-TO-Z-UINT64
                 COMPUTE $protoCobolDataItem.cobolName$ = W-Z-UINT64
      D          DISPLAY '$protoCobolDataItem.cobolName$ =' $protoCobolDataItem.cobolName$ ', AT OFFSET=' W-I
                 COMPUTE W-I = W-I + W-BYTES-USED
>>

pFloatToZComp1(protoCobolDataItem) ::= <<
                 PERFORM P-FLOAT-TO-Z-COMP-1 THRU
                     END-P-FLOAT-TO-Z-COMP-1
                 COMPUTE $protoCobolDataItem.cobolName$ = W-Z-COMP-1
      D          DISPLAY '$protoCobolDataItem.cobolName$ =' $protoCobolDataItem.cobolName$ ', AT OFFSET=' W-I
                 COMPUTE W-I = W-I + W-BYTES-USED
>>

pDoubleToZComp2(protoCobolDataItem) ::= <<
                 PERFORM P-DOUBLE-TO-Z-COMP-2 THRU
                     END-P-DOUBLE-TO-Z-COMP-2
                 COMPUTE $protoCobolDataItem.cobolName$ = W-Z-COMP-2
      D          DISPLAY '$protoCobolDataItem.cobolName$ =' $protoCobolDataItem.cobolName$ ', AT OFFSET=' W-I
                 COMPUTE W-I = W-I + W-BYTES-USED
>>

messageToGroup(protoCobolDataItem) ::= <<
                 PERFORM P-VARINT-TO-Z-UINT32 THRU
                     END-P-VARINT-TO-Z-UINT32
                 COMPUTE W-I = W-I + W-BYTES-USED
                 COMPUTE W-$protoCobolDataItem.cobolName$-L = W-I + W-Z-UINT32 - 1
                 PERFORM PARSE-$protoCobolDataItem.cobolName$ THRU
                     END-PARSE-$protoCobolDataItem.cobolName$
                         UNTIL W-I > W-$protoCobolDataItem.cobolName$-L
>>
